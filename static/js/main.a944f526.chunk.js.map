{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","focusPosition","maxFocusValue","props","frameSize","itemWidth","images","length","maxFocusPositionOfAllIcons","this","setState","infinite","step","animationDuration","maxFocusPosition","disablePrevButton","disableNextButton","className","style","width","map","imgLink","transform","transition","src","alt","type","disabled","onClick","prevState","newFocusPosition","newValue","maxWidth","React","Component","App","onChangeWidth","event","target","value","onChangeFrameSize","onChangeStep","onChangeAnimationDuration","onChangeInfinite","onChange","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a944f526.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\nimport { CarouselValues } from '../types/carousel';\n\ntype State = {\n  focusPosition: number;\n};\n\nclass Carousel extends React.Component<CarouselValues, State> {\n  state = {\n    focusPosition: 0,\n  };\n\n  componentDidUpdate() {\n    const maxFocusPositionOfAllIcons = this.maxFocusValue();\n\n    if (maxFocusPositionOfAllIcons > this.state.focusPosition) {\n      this.setState({\n        focusPosition: maxFocusPositionOfAllIcons,\n      });\n    }\n  }\n\n  maxFocusValue = () => {\n    const { frameSize, itemWidth, images } = this.props;\n\n    return -((images.length - frameSize) * itemWidth);\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      infinite,\n      step,\n      animationDuration,\n    } = this.props;\n\n    const { focusPosition } = this.state;\n\n    const maxFocusPosition = this.maxFocusValue();\n    const minFocusPosition = 0;\n\n    const disablePrevButton = focusPosition >= 0 && !infinite;\n    const disableNextButton = focusPosition\n    <= maxFocusPosition && !infinite;\n\n    const onPrevHandler = () => {\n      if (infinite && focusPosition >= 0) {\n        this.setState({\n          focusPosition: maxFocusPosition,\n        });\n\n        return;\n      }\n\n      this.setState(prevState => {\n        const newFocusPosition = prevState.focusPosition + (step * itemWidth);\n\n        return {\n          focusPosition: newFocusPosition > minFocusPosition\n            ? minFocusPosition : newFocusPosition,\n        };\n      });\n    };\n\n    const onNextHandler = () => {\n      if (\n        infinite\n        && focusPosition\n        <= maxFocusPosition) {\n        this.setState({ focusPosition: 0 });\n\n        return;\n      }\n\n      this.setState(prevState => {\n        const newValue = prevState.focusPosition - (+step * itemWidth);\n        const maxWidth = -((images.length - frameSize) * itemWidth);\n\n        return { focusPosition: newValue < maxWidth ? maxWidth : newValue };\n      });\n    };\n\n    return (\n      <div className=\"Carousel\">\n        <div>\n          <ul\n            style={{ width: frameSize * itemWidth }}\n            className=\"Carousel__list\"\n          >\n            {images.map((imgLink: string) => {\n              return (\n                <li\n                  className=\"Carousel__item\"\n                  key={imgLink}\n                >\n                  <img\n                    style={{\n                      width: itemWidth,\n                      transform: `translateX(${focusPosition}px)`,\n                      transition: `${animationDuration}ms`,\n                    }}\n                    src={imgLink}\n                    alt={imgLink}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n\n          <div className=\"Carousel__buttons\">\n            <button\n              type=\"button\"\n              disabled={disablePrevButton}\n              onClick={onPrevHandler}\n            >\n              &#8592;\n            </button>\n            <button\n              data-cy=\"next\"\n              type=\"button\"\n              disabled={disableNextButton}\n              onClick={onNextHandler}\n            >\n              &#8594;\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { CarouselValues } from './types/carousel';\n\nclass App extends React.Component<{}, CarouselValues> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    itemWidth: 130,\n    step: 3,\n    frameSize: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  onChangeWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemWidth: +event.target.value });\n  };\n\n  onChangeFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ frameSize: +event.target.value });\n  };\n\n  onChangeStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ step: +event.target.value });\n  };\n\n  onChangeAnimationDuration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ animationDuration: +event.target.value });\n  };\n\n  onChangeInfinite = () => {\n    this.setState(prevState => ({ infinite: !prevState.infinite }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      step,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\">Carousel</h1>\n\n        <form className=\"App__form\">\n          <label>\n            <span>Item width </span>\n            <input\n              type=\"number\"\n              value={itemWidth}\n              className=\"App__input\"\n              step={5}\n              onChange={this.onChangeWidth}\n              min={130}\n            />\n          </label>\n\n          <label>\n            <span>Frame size </span>\n            <input\n              type=\"number\"\n              className=\"App__input\"\n              value={frameSize}\n              step={1}\n              onChange={this.onChangeFrameSize}\n              min={1}\n              max={images.length}\n            />\n          </label>\n\n          <label>\n            <span>Step </span>\n            <input\n              type=\"number\"\n              className=\"App__input\"\n              value={step}\n              onChange={this.onChangeStep}\n              min={1}\n            />\n          </label>\n\n          <label>\n            <span>Animation duration </span>\n            <input\n              className=\"App__input\"\n              type=\"number\"\n              value={animationDuration}\n              onChange={this.onChangeAnimationDuration}\n            />\n          </label>\n\n          <label>\n            <span>Infinite </span>\n            <input\n              className=\"App__input\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={this.onChangeInfinite}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}